security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        users_in_memory: { memory: null }
    # REEMPLAZADO DESDE AQUÍ
    firewalls:
        # Configuración de dónde va a actuar JWT y el authenticator
        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        api:
            pattern: ^/api
            stateless: true
            jwt: ~

    #Configuración de control de acceso a la API
    access_control:
        #- { path: ^/admin, roles: ROLE_ADMIN }
        #- { path: ^/profile, roles: ROLE_USER }
        - { path: ^/api/login_check, roles: PUBLIC_ACCESS } #Permitirá entrar al login
        - { path: ^/api/user, roles: PUBLIC_ACCESS } #Permitirá registrar un User
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY } #Si se comenta se desactiva la seguridad. Recomendable comentar esta línea para hacer debug
        #- { path: ^/api/restaurante, roles: ROLE_RESTAURANTE }

    #Jerarquía de roles
    role_hierarchy:
        #Aqui se especifican a qué roles pueden acceder qué roles (definidos en User.php). La jerarquia es ascendente
        #"Lo naranja referencia las constantes de User.php"
        ROLE_CLIENTE: ROLE_USER #ROLE_CLIENTE tiene los mismos permisos que el usuario "por defecto"
        ROLE_RESTAURANTE: ROLE_USER
        ROLE_ADMIN : [ROLE_USER, ROLE_CLIENTE, ROLE_RESTAURANTE] #ROLE_ADMIN puede acceder a lo mismo que los demás juntos

    #REEMPLAZADO HASTA AQUI

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
